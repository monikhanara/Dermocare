[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "session_state",
        "importPath": "streamlit",
        "description": "streamlit",
        "isExtraImport": true,
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "shap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shap",
        "description": "shap",
        "detail": "shap",
        "documentation": {}
    },
    {
        "label": "load_model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "image",
        "importPath": "tensorflow.keras.preprocessing",
        "description": "tensorflow.keras.preprocessing",
        "isExtraImport": true,
        "detail": "tensorflow.keras.preprocessing",
        "documentation": {}
    },
    {
        "label": "image",
        "importPath": "keras.preprocessing",
        "description": "keras.preprocessing",
        "isExtraImport": true,
        "detail": "keras.preprocessing",
        "documentation": {}
    },
    {
        "label": "preprocess_input",
        "importPath": "tensorflow.keras.applications.efficientnet",
        "description": "tensorflow.keras.applications.efficientnet",
        "isExtraImport": true,
        "detail": "tensorflow.keras.applications.efficientnet",
        "documentation": {}
    },
    {
        "label": "load_img",
        "importPath": "keras.preprocessing.image",
        "description": "keras.preprocessing.image",
        "isExtraImport": true,
        "detail": "keras.preprocessing.image",
        "documentation": {}
    },
    {
        "label": "img_to_array",
        "importPath": "keras.preprocessing.image",
        "description": "keras.preprocessing.image",
        "isExtraImport": true,
        "detail": "keras.preprocessing.image",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def signup(json_file_path=\"data.json\"):\n    st.title(\"Signup Page\")\n    with st.form(\"signup_form\"):\n        st.write(\"Fill in the details below to create an account:\")\n        name = st.text_input(\"Name:\")\n        email = st.text_input(\"Email:\")\n        age = st.number_input(\"Age:\", min_value=0, max_value=120)\n        sex = st.radio(\"Sex:\", (\"Male\", \"Female\", \"Other\"))\n        password = st.text_input(\"Password:\", type=\"password\")\n        confirm_password = st.text_input(\"Confirm Password:\", type=\"password\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "check_login",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def check_login(username, password, json_file_path=\"data.json\"):\n    try:\n        with open(json_file_path, \"r\") as json_file:\n            data = json.load(json_file)\n        for user in data[\"users\"]:\n            if user[\"email\"] == username and user[\"password\"] == password:\n                session_state[\"logged_in\"] = True\n                session_state[\"user_info\"] = user\n                st.success(\"Login successful!\")\n                render_dashboard(user)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "predict_skin",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def predict_skin(image_path, model):\n    img = Image.open(image_path).resize((32, 32))\n    img_array = img_preprocessing.img_to_array(img) / 255.0\n    img_array = np.expand_dims(img_array, axis=0)\n    # Make predictions using the model\n    predictions = model.predict(img_array)\n    # Get the predicted label\n    predicted_label_index = np.argmax(predictions)\n    # Define class labels\n    class_labels = {",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "load_background_batch",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def load_background_batch():\n    dir_path = './data'\n    batch_data = []\n    image_files = os.listdir(dir_path)\n    # print(image_files)\n    background_data = []\n    for img_file in image_files:\n        img_path = os.path.join(dir_path, img_file)\n        # print(img_path)\n        img = image.load_img(img_path, target_size=(32, 32))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "shap_explanation",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def shap_explanation(model, img_array, background):\n    explainer = shap.DeepExplainer(model, background)\n    shap_values = explainer.shap_values(img_array)\n    return shap_values\ndef show_shap(shap_values, img_array, predicted_class_idx):\n    if len(img_array.shape) == 3:\n        img_array = np.expand_dims(img_array, axis=0)\n    # Get the SHAP values for the predicted class\n    shap_values_for_predicted_class = shap_values[predicted_class_idx]\n    # Plotting",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "show_shap",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def show_shap(shap_values, img_array, predicted_class_idx):\n    if len(img_array.shape) == 3:\n        img_array = np.expand_dims(img_array, axis=0)\n    # Get the SHAP values for the predicted class\n    shap_values_for_predicted_class = shap_values[predicted_class_idx]\n    # Plotting\n    plt.figure()\n    shap.image_plot(shap_values_for_predicted_class, img_array)\n    plt.show()\n    st.write('Inference for the Prediction: Plot of SHAP values')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_predictions",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_predictions(uploaded,model):\n    if uploaded is not None:\n        global img\n        img = Image.open(uploaded).resize((32,32))\n        img_array = img_to_array(img)/255.0\n        img_array = np.expand_dims(img_array,axis=0)\n        prediction = model.predict(img_array)\n        predicted_class = np.argmax(prediction)\n        print(predicted_class)\n        confidence = prediction[0, predicted_class]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "generate_medical_report",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def generate_medical_report(predicted_label):\n    skin_disease_info = {\n        \"Actinic keratoses\": {\n            \"report\": \"It appears the patient may have actinic keratoses, which are precancerous skin lesions caused by sun damage. Early treatment is crucial to prevent progression to skin cancer.\",\n            \"preventative_measures\": [\n                \"Avoid prolonged sun exposure, especially during peak hours\",\n                \"Use sunscreen with a high SPF regularly, and reapply as needed\",\n                \"Wear protective clothing, hats, and sunglasses when outdoors\",\n            ],\n            \"precautionary_measures\": [",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "initialize_database",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def initialize_database(json_file_path=\"data.json\"):\n    try:\n        # Check if JSON file exists\n        if not os.path.exists(json_file_path):\n            # Create an empty JSON structure\n            data = {\"users\": []}\n            with open(json_file_path, \"w\") as json_file:\n                json.dump(data, json_file)\n    except Exception as e:\n        print(f\"Error initializing database: {e}\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "save_image",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def save_image(image_file, json_file_path=\"data.json\"):\n    try:\n        if image_file is None:\n            st.warning(\"No file uploaded.\")\n            return\n        if not session_state[\"logged_in\"] or not session_state[\"user_info\"]:\n            st.warning(\"Please log in before uploading images.\")\n            return\n        # Load user data from JSON file\n        with open(json_file_path, \"r\") as json_file:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_account",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_account(name, email, age, sex, password, json_file_path=\"data.json\"):\n    try:\n        # Check if the JSON file exists or is empty\n        if not os.path.exists(json_file_path) or os.stat(json_file_path).st_size == 0:\n            data = {\"users\": []}\n        else:\n            with open(json_file_path, \"r\") as json_file:\n                data = json.load(json_file)\n        # Append new user data to the JSON structure\n        user_info = {",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def login(json_file_path=\"data.json\"):\n    st.title(\"Login Page\")\n    username = st.text_input(\"Username:\")\n    password = st.text_input(\"Password:\", type=\"password\")\n    login_button = st.button(\"Login\")\n    if login_button:\n        user = check_login(username, password, json_file_path)\n        if user is not None:\n            session_state[\"logged_in\"] = True\n            session_state[\"user_info\"] = user",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_user_info",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_user_info(email, json_file_path=\"data.json\"):\n    try:\n        with open(json_file_path, \"r\") as json_file:\n            data = json.load(json_file)\n            for user in data[\"users\"]:\n                if user[\"email\"] == email:\n                    return user\n        return None\n    except Exception as e:\n        st.error(f\"Error getting user information: {e}\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "render_dashboard",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def render_dashboard(user_info, json_file_path=\"data.json\"):\n    try:\n        st.title(f\"Welcome to the Dashboard, {user_info['name']}!\")\n        st.markdown(\n    \"\"\"\n    <div style='text-align: left;'>\n        <p>There are 7 different classes of skin cancer which are listed below:</p>\n        <ul>\n            <li style='color: #008000;'>Actinic keratoses</li>\n            <li style='color: #ff6600;'>Basal cell carcinoma</li>",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "fetch_precautions",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def fetch_precautions(user_info):\n    return (\n        user_info[\"precautions\"]\n        if user_info[\"precautions\"] is not None\n        else \"Please upload skin images and generate a report.\"\n    )\ndef main(json_file_path=\"data.json\"):\n    st.sidebar.title(\"Skin disease prediction system\")\n    page = st.sidebar.radio(\n        \"Go to\",",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def main(json_file_path=\"data.json\"):\n    st.sidebar.title(\"Skin disease prediction system\")\n    page = st.sidebar.radio(\n        \"Go to\",\n        (\"Signup/Login\", \"Dashboard\", \"Upload Skin Image\", \"View Reports\"),\n        key=\"Skin disease prediction system\",\n    )\n    if page == \"Signup/Login\":\n        st.title(\"Signup/Login Page\")\n        login_or_signup = st.radio(",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "session_state",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "session_state = st.session_state\nif \"user_index\" not in st.session_state:\n    st.session_state[\"user_index\"] = 0\ndef signup(json_file_path=\"data.json\"):\n    st.title(\"Signup Page\")\n    with st.form(\"signup_form\"):\n        st.write(\"Fill in the details below to create an account:\")\n        name = st.text_input(\"Name:\")\n        email = st.text_input(\"Email:\")\n        age = st.number_input(\"Age:\", min_value=0, max_value=120)",
        "detail": "app",
        "documentation": {}
    }
]